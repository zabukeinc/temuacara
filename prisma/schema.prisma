generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
  binaryTargets   = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("permissions")
}

model Role {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model User {
  id String @id @default(cuid())

  // basic information
  name        String
  email       String? @unique @db.Char(50)
  phone       String? @db.Char(14)
  password    String
  reset_token String? @db.Text

  // address
  country     String?
  province    String?
  state       String?
  city        String?
  village     String?
  postal_code String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  talks Talk[]

  @@index([email], name: "email_index")
  @@map("users")
}

model UserRole {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_roles")
}

model UserRolePermission {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_role_permissions")
}

model UserProfile {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_profiles")
}

model UserLog {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_logs")
}

enum TalkEnum {
  PRE_MARITAL
  POST_MARITAL
}

model Talk {
  id                Int       @id @default(autoincrement())
  question          String
  suggestion        String
  answered_by_groom Boolean
  answered_by_bride Boolean
  asked_by_groom    Boolean
  asked_by_bride    Boolean
  is_groom_answerd  Boolean?
  is_bride_answerd  Boolean?
  answer_notes      String?
  type              TalkEnum
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  answered_at       DateTime?
  deleted_at        DateTime?
  user_id           String?
  user              User?     @relation(fields: [user_id], references: [id])

  @@index([question], name: "question_index")
  @@map("talks")
}

// Enums

enum SuggestionType {
  MUST
  RECOMMENDED
  OPTIONAL
}

enum WeddingRoleType {
  GROOM
  BRIDE
  GROOM_FAMILY
  BRIDE_FAMILY
  ALL
}

enum ChecklistType {
  PREPARATION
  DOCUMENT
  HEALTH
  HONEYMOON
  PRE_MARITAL  @map("PRE_MARITAL_TALK")
  POST_MARITAL @map("POST_MARITAL_TALK")
}

model Checklist {
  id             String            @id @default(uuid()) @db.Uuid
  checklist      String
  type           ChecklistType
  suggestion     SuggestionType
  responsibility WeddingRoleType[] @default([])
  status         WeddingRoleType[] @default([])
  assigned_to    WeddingRoleType[] @default([])
  notes          String?
  completed_at   DateTime?
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  deleted_at     DateTime?

  @@index([checklist])
  @@map("checklists")
}

enum WeddingRoleEnum {
  GROOM
  BRIDE
  GROOM_FAMILY
  BRIDE_FAMILY
  ALL
}

enum InvitationStatusEnum {
  LISTED
  UNLISTED
  INVITED
  PENDING
  RESERVED
  CONFIRMED
  ATTENDED
  DECLINED
  NO_RESPONSE
}

enum InvitationTypeEnum {
  WEBSITE
  EMAIL
  MESSAGE
  WHATSAPP
  PRINT
  OTHER
}

enum WebsiteFeatureEnum {
  MUSIC
  STORY
  GALLERY
  MAPS
  RSVP
  GIFT_LIST @map("GIFT")
  DONATION
  OTHER
}

enum WebsiteTrackEnum {
  OPENED
  SENT
  EXPIRED
}

model InvitationCategory {
  id               String           @id @default(uuid()) @db.Uuid
  name             String           @unique
  created_at       DateTime?        @default(now())
  updated_at       DateTime?        @updatedAt
  deleted_at       DateTime?
  invitation_infos InvitationInfo[] // Changed to one-to-many relationship

  @@map("invitation_categories")
}

model Invitation {
  id         String               @id @default(uuid()) @db.Uuid
  name       String               @db.VarChar
  pax        Int
  inviter    WeddingRoleEnum
  status     InvitationStatusEnum
  type       InvitationTypeEnum
  priority   Int?
  created_at DateTime?            @default(now()) @db.Timestamptz
  updated_at DateTime?            @updatedAt @db.Timestamptz
  deleted_at DateTime?            @db.Timestamptz

  invitation_info    InvitationInfo?
  invitation_website InvitationWebsite?

  @@map("invitations")
}

model InvitationInfo {
  id                     String             @id @default(uuid()) @db.Uuid
  invitation_id          String             @unique @db.Uuid
  invitation_category_id String             @db.Uuid // Made required and removed @unique
  address                String             @db.Text
  from                   String?            @db.VarChar
  phone                  String?            @db.VarChar
  email                  String?            @db.VarChar
  created_at             DateTime?          @default(now())
  updated_at             DateTime?          @updatedAt
  deleted_at             DateTime?
  invitation_category    InvitationCategory @relation(fields: [invitation_category_id], references: [id])
  invitation             Invitation         @relation(fields: [invitation_id], references: [id])

  @@map("invitation_infos")
}

model InvitationWebsite {
  id            String               @id @default(uuid()) @db.Uuid
  invitation_id String               @unique @db.Uuid
  url           String               @db.Text
  feature       WebsiteFeatureEnum[]
  track         WebsiteTrackEnum?
  sent_at       DateTime?
  opened_at     DateTime?
  expired_at    DateTime?
  created_at    DateTime?            @default(now())
  updated_at    DateTime?            @updatedAt
  deleted_at    DateTime?

  invitation Invitation @relation(fields: [invitation_id], references: [id])

  @@map("invitation_websites")
}

enum GiftTypeEnum {
  BRIDE_PRICE
  WEDDING_GIFT
  GUEST_GIFT
}

enum GiftPlatformEnum {
  OFFLINE_STORE
  ONLINE_STORE
  SOCIAL_MEDIA
  OTHER
}

enum GiftCategoryEnum {
  CASH
  GOLD
  JEWELRY
  RING
  MAKEUP
  SKIN_CARE
  BODY_CARE
  HAIR_CARE
  CLOTHES
  ACCESSORIES
  BOX
  OTHER
}

enum GiftStatusEnum {
  LISTED
  UNLISTED
  PREORDERED
  CHECKOUTED
  PENDING
  SHIPPED
  RECEIVED
  COMPLETED
  CANCELLED
}

model Gift {
  id             String            @id @default(uuid()) @db.Uuid
  item           String            @db.VarChar
  type           GiftTypeEnum
  category       GiftCategoryEnum
  store          String            @db.VarChar
  platform       GiftPlatformEnum
  price          Int
  quantity       Int
  total_price    Int
  responsibility WeddingRoleType[] @default([])
  status         GiftStatusEnum
  notes          String?           @db.Text
  created_at     DateTime?         @default(now()) @db.Timestamptz
  updated_at     DateTime?         @updatedAt @db.Timestamptz
  deleted_at     DateTime?         @db.Timestamptz

  @@map("gifts")
}
